import java.time.LocalDate
import java.time.format.DateTimeFormatter

val dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd")
val realeaseDateList = data
	.map(row => row("release_date"))
	.filter(!_.equals(""))
	.map(text => LocalDate.parse(text, dateFormatter))
val yearReleaseList = releaseDateList
	.map(_.getYear)
printf("Año menor: %\n", yearReleaseList.min)
printf("Año mayor: %\n", yearReleaseList.max)

//dependencia en build.sbt
libraryDependencies += "io.github.cibotech" %% "evilplot" % "0.8.1"

//elementos a importar
import com.cibo.evilplot.plot._
import com.cibo.evilplot.plot.aesthetics.DefaultTheme.{DefaultElements, DefaultTheme}

//lanzamiento de peliculas por año HISTOGRAMA
val yearReleaseList = releaseDateList
	.map(_.getYear)
	.map(_.toDouble)
Histogram(yearReleaseList)
	.title("Años de lanzamiento")
	.xAxis()
	.yAxis()
	.xbounds(1916.0, 2018.0)
	.render()
	.write(new File("ruta.png"))

//ver top 10 compañias productoras DIAGRAMA DE BARRAS
val productionCompanies = data
	.flatMap(row => row.get("production_companies"))
	.map(row => Json.parse(row))
	.flatMap(jsonData => jsonData \\ "name")
	.map(jsValue => jsValue.as[String])
	.groupBy(identity)
	.map { case (keyword, lista) => (keyword, lista.size) }
	.toList
	.sortBy(_._2)
	.reverse

val pCompaniesValues = productionCompanies.take(10).map(_._2).map(_.toDouble)
val pCompanieLables = productionCompanies.take(10).map(_._1)

BarChart(pCompaniesValues)
	.title("Compañias productoras")
	.xAxis(pCompanieLables)
	.xAxis()
	.frame()
	.yLabel("Productions")
	.render()
	.write(new File("ruta.png"))

//modificar presentacion del texto -antes del BarChart-
implicit val theme = DefaultTheme.copy(
	elements = DefaultElements.copy(categoricalXAxisLabelOrientation = 45)	
)

//Tratar de leer crew
val crew = data
	.map(row => row("crew"))
	.map(text => text.replace("'", "\""))
	.size

//expresion regular apostrofe dentro de comillas dobles
(\\s\"(.*?)\",)			//reemplazar comilla simple

//expresion regular comillas dobles dentro de los apostrofes
([a-z]\\s\"(.*?)\"\\s*[A-Z])	//reemplazar comillas dobles

//expresion regular comillas dobles dentro de los apostrofes
(:\\s'\"(.*?)',)		//reemplazar comillas dobles

//leer crew de manera estructural -interpolar-
def replacePattern(original : String) : String = {
	var txtOr = original
	val pattern: Regex = "(\\s\"(.*?)\",)".r
	for(m <- pattern.findAllIn(original)) {
		val textOriginal = m
		val replacementText = m.replace("'", "-u0027")
		txtOr = txtOr.replace(textOriginal, replacementText)
	}
	txtOr
}
...

val crew = data
	.map( row => row("crew"))
	.map(replacePattern2)
	.map(replacePattern)
	.map(replacePattern3)
	.map(text => text.replace"'", "\"")))
	.map(text => text.replace("-u0027, "'"))
	.map(text => text.replace" -u0022, "\\\""))
	.map(text => Try (Json.parse(text)))
	.filter(_.isFailure)
	.size
