  case class Movie(id: String,
                   originalLanguage: String,
                   originalTitle: String,
                   budget: Long,
                   popularity: Double,
                   runtime: Double,
                   revenue: Long)


  val movieData = data
    .map(row => Movie(
      row("id"),
      row("original_language"),
      row("original_title"),
      row("budget").toLong,
      row("popularity").toDouble,
      row("runtime") match {
        case valueOfRT if valueOfRT.trim.isEmpty => 0.0
        case valueOfRT => valueOfRT.toDouble
      },
      row("revenue").toLong))
  println("dataaaaA:")
  println(movieData)

  def transform(jsValue: JsValue): List[String] =
    jsValue("entity_list").as[JsArray].value
      .map(_ ("form"))
      .map(_.as[String])
      .toList

  val castId = data
    .map(row => (row("id"), row("cast")))
    .filter(_._2.nonEmpty)
    .map(tuple2 => (tuple2._1, StringContext.processEscapes(tuple2._2)))
    .take(10)
    .map { t2 => (t2._1, actorsNames(t2._2)) }
    .map { t2 => (t2._1, Try(Json.parse(t2._2.get))) }
    .filter(_._2.isSuccess)
    .map(t2 => (t2._1, t2._2.get))
    .map(t2 => (t2._1, transform(t2._2)))
    .flatMap(t2 => t2._2.map(name => (t2._1, name)))
    .map(_.productIterator.toList)
    .distinct

  val f = new File("C:\\Users\\crixx\\OneDrive\\Escritorio\\Funcional y Reactiva/cast_id.sql")
  val writer = CSVWriter.open(f)
  writer.writeAll(castId)
  writer.close()


  val SQL_INSERT_PATTERN =
    """INSERT INTO MOVIE (`RAW_ID`, `ORIGINAL_TITLE`, `BUDGET`, `POPULARITY`,`RUNTIME`, `REVENUE`)
      VALUES
      ('%s', '%s', %d, %f, %f, %d);
      """.stripMargin

  val scriptData = movieData
    .map(movie => SQL_INSERT_PATTERN.formatLocal(java.util.Locale.US,
      movie.id,
      escapeMysql(movie.originalTitle),
      movie.budget,
      movie.popularity,
      movie.runtime,
      movie.revenue,
      //escapeMysql(movie.originalLanguage)
    ))