//Programacion reactiva
- Manejo de Datos
	Flujo infinito de datos
	Se reacciona cuando llega un grupo de datos
	Reacciones de manera asincrona
	Patron observer: Subscriptor y quien publica
- Pro reactiva funcional
	Comportamiento o senales
	Comportamientos son valores continuos que siempre tienen un valor actual.
	Ejem: la posicion del mouse
Functional Reactive Programming
Ejemplo 1
```scala
import rx._
object Main extends App {
  val a = Var(1)
  val b = Var(2)
  val c = Rx{ a() + b() }

  println(c.now)
  a() = 4

  println(c.now)
}
```
Var(variable inteligente) y RX(definicion reactiva):
son subtipos de Obs

Ejemplo 2
```scala
object Main extends App {
  val a = Var(1)

  val b = Var(2)

  val c = Rx{ a() + b() }
  val d = Rx{ c() * 5 }
  val e = Rx{ c() + 4 }
  val f = Rx{ d() + e() + 4}

  println(f.now)
  a() = 3

  println(f.now)
}
```

Ejemplo 3
```scala
object Main extends App {
  val a = Var(1)
  var count = 0
  val o = a.trigger {
    count = a.now + 1
  }
  println(count)
  a() = 4
  println(count)
}
```

```scala
object Main extends App {
  val a = Var(1)
  var count = 0
  val o = a.trigger {
    count = count + 1
  }
  println(count)
  a() = 4
  println(count)
}

object Main extends App {
  val a = Var(1)
  var count = 0
  val o = a.triggerLater {
    count = count + 1
  }
  println(count)
  a() = 4
  println(count)
}

Kill Obs

object Main extends App {
  val a = Var(1)
  val b = Rx{2 * a() }
  var target = 0
  val o = b.trigger{
    target = b.now
  }
  println(target)
  a() = 2
  println(target)
  o.kill()
  a() = 3
  println(target)
}